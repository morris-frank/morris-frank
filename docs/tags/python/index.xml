<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Morris-Frank</title>
    <link>https://morris-frank.dev/tags/python/</link>
    <description>Recent content in Python on Morris-Frank</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 22 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://morris-frank.dev/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using plots as ticks in PyPlot</title>
      <link>https://morris-frank.dev/plotting-ticks/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/plotting-ticks/</guid>
      <description>Why? I was building a heatmap showing some result on different signal sources. The signals where different simple curves: sinus, triangle, square and saw-tooth waves. Now for annotating the plot, yes you could write down the names of the signals on the axis and yes that&amp;rsquo;s probably the &amp;lsquo;correct&amp;rsquo; way to do it. But it is ugly and not intuitive if you could also just show the signals:
  How?</description>
    </item>
    
    <item>
      <title>Getting the argument names of a function</title>
      <link>https://morris-frank.dev/function-names/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/function-names/</guid>
      <description>Why? My use-case is as follows: I have a plotting function which takes a variable number of signals and plots them in an organized little plot:
def plot_data(*signals: torch.Tensor): ... The organization of those plots I can infer from the data, but it would also be nice to label the plots with a legend. The pythonic way to do this, is either to accept another argument with a list of labels or give the signals in a dictionary with the labels as the keys.</description>
    </item>
    
    <item>
      <title>WaveNet from scratch</title>
      <link>https://morris-frank.dev/wavenet/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/wavenet/</guid>
      <description>This guide is geared towards readers with a background in modern deep learning.
The problem Lets say we want to generate sound signals. This might happen in different settings. We might have music notes + a instrument and want to generate their sound \(w(\mathrm{note}, \mathrm{instrument}) = \mathrm{sound}\), or we have a text and want to generate the corresponding speech \(w(\mathrm{text}) = \mathrm{sound}\) or maybe we already have a sound signal, but it is noisy and we want to remove the noise \(w(\mathrm{noisy\ sound}) = \mathrm{sound}\).</description>
    </item>
    
  </channel>
</rss>
