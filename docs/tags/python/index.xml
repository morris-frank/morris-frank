<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Morris-Frank</title>
    <link>https://morris-frank.dev/tags/python/</link>
    <description>Recent content in Python on Morris-Frank</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://morris-frank.dev/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collection of Python snippets</title>
      <link>https://morris-frank.dev/python-snippets/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/python-snippets/</guid>
      <description>Use underscores in numbers Underscores in numbers are ignored, but can increase readability:
2_000_000 == 2000000 Use underscores to discard returns Use underscores to ignore return elemens. More advanced, use can use a wildcard * to discard a sub-set of the return arguments:
def some_function(): … return a, b, c, d a, _, c, d = func() a, *_, d = func() Check for any of list of types if isinstance(variable, (int, float)): # … Use default if is None Instead of:</description>
    </item>
    
    <item>
      <title>Persistant shared memory</title>
      <link>https://morris-frank.dev/shm/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/shm/</guid>
      <description>For a data visualization project at my current employer we need a way to save big data matrices in-memory and access them from random processes. On the server mulitple DASH dashboards are hosted, with which you can build nice web data viz dashboards while staying purely in Python. The data displayed in the dashboards where consisting of matrices, each up to 5GB big. As the dashboards are, of course, multi-user and a also randomly shutting down and up and also are running by different users on the system, if you would just access the pickled numpy files on the hard drive, when needed, you would be constantly loading data which takes forever.</description>
    </item>
    
    <item>
      <title>Using plots as ticks in PyPlot</title>
      <link>https://morris-frank.dev/plottings-ticks/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/plottings-ticks/</guid>
      <description>Why? I was building a heatmap showing some result on different signal sources. The signals where different simple curves: sinus, triangle, square and saw-tooth waves. Now for annotating the plot, yes you could write down the names of the signals on the axis and yes that&amp;rsquo;s probably the &amp;lsquo;correct&amp;rsquo; way to do it. But it is ugly and not intuitive if you could also just show the signals:
How? Unsuprisingly we proceed as follows: We remove all actual ticks from the plot and add correctly small sized axes onto the figure.</description>
    </item>
    
    <item>
      <title>Getting the argument names of a function</title>
      <link>https://morris-frank.dev/function-names/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/function-names/</guid>
      <description>Why? My use-case is as follows: I have a plotting function which takes a variable number of signals and plots them in an organized little plot:
def plot_data(*signals: torch.Tensor): ... The organization of those plots I can infer from the data, but it would also be nice to label the plots with a legend. The pythonic way to do this, is either to accept another argument with a list of labels or give the signals in a dictionary with the labels as the keys.</description>
    </item>
    
  </channel>
</rss>
