<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About me on Morris-Frank</title>
    <link>https://morris-frank.dev/</link>
    <description>Recent content in About me on Morris-Frank</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 15 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://morris-frank.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bitwig controller script tutorial</title>
      <link>https://morris-frank.dev/bitwig-controller/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/bitwig-controller/</guid>
      <description>Shotrcuts          Ctrl + Shift + J Console   Ctrl + R Reload the script live while in the console    Functions Utilities          println(string) Print a line in the console   errorln(string) Print a error in the console   showPopupNotification(string) Show a popup in the GUI (not the console)   printMidi(status, key, value) Helper to print a Midi command    Global settings loadAPI(12); host.</description>
    </item>
    
    <item>
      <title>Serverless captcha for static sites</title>
      <link>https://morris-frank.dev/captcha/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/captcha/</guid>
      <description>In a recent web-design project we decided that we want to prevent spam and other leakages of information by hiding away that content (e.g. the mail-address) behind a CAPTCHA. Now that web-site up until that point was a completely static site (build with Hugo) even lacking any scripting. As I am a staunch defender of keeping static content static, I wanted to avoid having to administer a server and maybe even porting this simple site to some form of dynamic CMS.</description>
    </item>
    
    <item>
      <title>Using plots as ticks in PyPlot</title>
      <link>https://morris-frank.dev/plotting-ticks/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/plotting-ticks/</guid>
      <description>Why? I was building a heatmap showing some result on different signal sources. The signals where different simple curves: sinus, triangle, square and saw-tooth waves. Now for annotating the plot, yes you could write down the names of the signals on the axis and yes that&amp;rsquo;s probably the &amp;lsquo;correct&amp;rsquo; way to do it. But it is ugly and not intuitive if you could also just show the signals:
  How?</description>
    </item>
    
    <item>
      <title>Getting the argument names of a function</title>
      <link>https://morris-frank.dev/function-names/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/function-names/</guid>
      <description>Why? My use-case is as follows: I have a plotting function which takes a variable number of signals and plots them in an organized little plot:
def plot_data(*signals: torch.Tensor): ... The organization of those plots I can infer from the data, but it would also be nice to label the plots with a legend. The pythonic way to do this, is either to accept another argument with a list of labels or give the signals in a dictionary with the labels as the keys.</description>
    </item>
    
    <item>
      <title>Personalize your keyboard layout</title>
      <link>https://morris-frank.dev/keymap/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/keymap/</guid>
      <description>What is it? That&amp;rsquo;s easy. The XKB (X keyboard extension) layout tells your system which character/symbol to print, when you press a key on your keyboard.
Why? Most people that start going down this path and ask Which keyboard layout should I use? probably end up with one of the modern optimized layouts, like Neo (German only). The argument being, that the layout most of use like QWERTY (or QWERTZ, etc.</description>
    </item>
    
    <item>
      <title>Using a LaTeX macro package</title>
      <link>https://morris-frank.dev/latex-macros/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/latex-macros/</guid>
      <description>If you never have written a TeX package, here the short-form with only the stuff we need. You start the file with
\NeedsTeXFormat{LaTeX2e}[1994/06/01] \ProvidesPackage{YOUR-PACKAGE-NAME} end it with
\endinput and save it with extension .sty instead of .tex.
Things to add  Packages you always include. For example which fonts to use. In a package .sty file you use \RequirePackage instead of \usepackage to include other packages. \RequirePackage{newpxtext} \RequirePackage{mathpazo} \RequirePackage{dsfont}  Faster font changes.</description>
    </item>
    
    <item>
      <title>WaveNet from scratch</title>
      <link>https://morris-frank.dev/wavenet/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/wavenet/</guid>
      <description>This guide is geared towards readers with a background in modern deep learning.
The problem Lets say we want to generate sound signals. This might happen in different settings. We might have music notes + a instrument and want to generate their sound \(w(\mathrm{note}, \mathrm{instrument}) = \mathrm{sound}\), or we have a text and want to generate the corresponding speech \(w(\mathrm{text}) = \mathrm{sound}\) or maybe we already have a sound signal, but it is noisy and we want to remove the noise \(w(\mathrm{noisy\ sound}) = \mathrm{sound}\).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://morris-frank.dev/bivy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/bivy/</guid>
      <description>   Item Product Price Weight Volume     Bivy bag BD/MSR/RAB 150-250 200-350 3L   Sleeping bag Mythic Ultra 180 450 400 5L    </description>
    </item>
    
    <item>
      <title>Collection of Python snippets</title>
      <link>https://morris-frank.dev/python-snippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/python-snippets/</guid>
      <description>My running un-sorted list of snippets for Python that I use regulary, and I have seen that people don&amp;rsquo;t know about them. Some are really basic some weirdly advanced…
Use underscores in numbers Underscores in numbers are ignored, but can increase readability:
2_000_000 == 2000000 Use underscores to discard returns Use underscores to ignore return elemens. More advanced, use can use a wildcard * to discard a sub-set of the return arguments:</description>
    </item>
    
    <item>
      <title>Hire me</title>
      <link>https://morris-frank.dev/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/services/</guid>
      <description>I am working as a freelance contractor and consultant bringing business value to your company using the powers of modern machine learning methods.
As an experienced researcher as well as seasoned industry developer I can help you and your company extracting real returns out of complex data and how to successfully choose the right tools for the job. The contemporary research world of machine learning is vast and complex and many companies fail at utilizing the academic advancements for their business.</description>
    </item>
    
    <item>
      <title>Making music videos with AI</title>
      <link>https://morris-frank.dev/ai_music_video/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/ai_music_video/</guid>
      <description>Let&amp;rsquo;s start right away with some results from the setup.
Lucy in the Sky with Diamonds As all the videos are pretty intense and inconsistent, I think psychdelic rock lends itself quite naturally to this kind of video… What better than the classic Lucy in the sky from The Beatle&amp;rsquo;s Sgt. Pepper album.
Input here are only the lyrics plus &amp;ldquo;The Beatles&amp;rdquo; at the beginning and &amp;ldquo;The end&amp;rdquo; at the end.</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>https://morris-frank.dev/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/maps/</guid>
      <description>window.addEventListener(&#39;load&#39;, function() { let tileserver = &#34;https://tiles.morris-frank.dev/file/osm-tiles/&#34;; let basemaps = { &#34;Topology&#34;: L.tileLayer(tileserver + &#39;topo/{z}/{x}/{y}.png&#39;,{maxZoom:16}), &#34;Alpine club&#34;: L.tileLayer(tileserver + &#39;avk/{z}/{x}/{y}.png&#39;,{maxZoom:16}) }; let layers = {&#34;hikr_L&#34; : &#34;#b3a178&#34;, &#34;hikr_WS-&#34; : &#34;#a4735d&#34;, &#34;hikr_WS&#34; : &#34;#8b413f&#34;, &#34;hikr_WS+&#34; : &#34;#530609&#34;, &#34;bergrebell_L&#34;: &#34;#828d04&#34;, &#34;bergrebell_WS-&#34;: &#34;#4b6f21&#34;, &#34;bergrebell_WS&#34;: &#34;#245637&#34;, &#34;bergrebell_WS+&#34;: &#34;#04424b&#34;} let overlays = {} for (var d in layers) { overlays[d] = new L.GPX(&#34;./&#34; + d + &#34;.gpx&#34;, { async: true, marker_options: {startIconUrl: null, endIconUrl: null, shadowUrl: null}, polyline_options: {color: layers[d], opacity: 0.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://morris-frank.dev/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/projects/</guid>
      <description>Audio-visual Making music videos with AI  Iteratively sampling from a generative image model to generate videos conditioned on the lyrics of songs.   Still in motion  A non-endless endless stream of images in motion through space and time.   Music I am learning to make amateurish music. Currently on a mission of one track per week in Bitwig (the only professional DAW running on Linux).
See here as it happens:</description>
    </item>
    
    <item>
      <title>Still in motion</title>
      <link>https://morris-frank.dev/motionstills/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/motionstills/</guid>
      <description>I am really in love with an app made @ Google Research called MotionStills. It takes little videos that can be stabilized with some quite involved CV algorithm it seems… And the app is super slim… I assume Google will kill it in the future but until then it is super fun to use.
2021                                                                                                                                                                                                2021 2020                                                                        2020 2019                                                                       2019 2018                                                                                                              2018 </description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://morris-frank.dev/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/tutorials/</guid>
      <description>Machine learning WaveNet from scratch 2019-12-02  Today we are building a WaveNet from scratch. The WaveNet is an autoregressive, generative and deep model for audio signals.   Python Using plots as ticks in PyPlot 2020-03-22  Another week another tutorial for something that you never thought about doing. Can we replace the ticks in a PyPlot figure with plots?   Getting the argument names of a function 2020-02-12  Is it possible to get the names of the variables given as positional arguments to a function?</description>
    </item>
    
  </channel>
</rss>
