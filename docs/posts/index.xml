<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Morris-Frank</title>
    <link>https://morris-frank.dev/posts/</link>
    <description>Recent content in Posts on Morris-Frank</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://morris-frank.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collection of Python snippets</title>
      <link>https://morris-frank.dev/python-snippets/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/python-snippets/</guid>
      <description>Use underscores in numbers Underscores in numbers are ignored, but can increase readability:
2_000_000 == 2000000 Use underscores to discard returns Use underscores to ignore return elemens. More advanced, use can use a wildcard * to discard a sub-set of the return arguments:
def some_function(): … return a, b, c, d a, _, c, d = func() a, *_, d = func() Use type in add_argument to directly transform input A pattern I use a lot in ArgumentParser is to abuse the type argument.</description>
    </item>
    
    <item>
      <title>Extract panels from comic pages</title>
      <link>https://morris-frank.dev/comic_panels/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/comic_panels/</guid>
      <description>Today some classical computer vision with OpenCV. I needed a dataset of individual comic book panels for some model fine-tuning.
For example take this page from an &amp;ldquo;Astérix&amp;rdquo; comic-book:
After counting we see, it contains 11 individual panels and we will extract those with a little list of OpenCV magic.
import cv2 as cv import numpy as np file = &amp;#34;page.jpg&amp;#34; orignal_img = cv.imread(file) height, width = orignal_img.shape[:-1] Grayscale First, convert it to grayscale.</description>
    </item>
    
    <item>
      <title>Latents</title>
      <link>https://morris-frank.dev/latents/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/latents/</guid>
      <description>Asterix &amp;amp; Obelix (ruDALL-e) Sickle Army Gallia Obelix Romans Romans are crazy Gladiator Magic potion звездочка борьба </description>
    </item>
    
    <item>
      <title>Persistant shared memory</title>
      <link>https://morris-frank.dev/shm/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/shm/</guid>
      <description>For a data visualization project at my current employer we need a way to save big data matrices in-memory and access them from random processes. On the server mulitple DASH dashboards are hosted, with which you can build nice web data viz dashboards while staying purely in Python. The data displayed in the dashboards where consisting of matrices, each up to 5GB big. As the dashboards are, of course, multi-user and a also randomly shutting down and up and also are running by different users on the system, if you would just access the pickled numpy files on the hard drive, when needed, you would be constantly loading data which takes forever.</description>
    </item>
    
    <item>
      <title>Bitwig controller script tutorial</title>
      <link>https://morris-frank.dev/bitwig-controller/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/bitwig-controller/</guid>
      <description>Shotrcuts          Ctrl + Shift + J Console   Ctrl + R Reload the script live while in the console    Functions Utilities          println(string) Print a line in the console   errorln(string) Print a error in the console   showPopupNotification(string) Show a popup in the GUI (not the console)   printMidi(status, key, value) Helper to print a Midi command    Global settings loadAPI(12); host.</description>
    </item>
    
    <item>
      <title>Serverless captcha for static sites</title>
      <link>https://morris-frank.dev/captcha/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/captcha/</guid>
      <description>In a recent web-design project we decided that we want to prevent spam and other leakages of information by hiding away that content (e.g. the mail-address) behind a CAPTCHA. Now that web-site up until that point was a completely static site (build with Hugo) even lacking any scripting. As I am a staunch defender of keeping static content static, I wanted to avoid having to administer a server and maybe even porting this simple site to some form of dynamic CMS.</description>
    </item>
    
    <item>
      <title>Using plots as ticks in PyPlot</title>
      <link>https://morris-frank.dev/plottings-ticks/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/plottings-ticks/</guid>
      <description>Why? I was building a heatmap showing some result on different signal sources. The signals where different simple curves: sinus, triangle, square and saw-tooth waves. Now for annotating the plot, yes you could write down the names of the signals on the axis and yes that&amp;rsquo;s probably the &amp;lsquo;correct&amp;rsquo; way to do it. But it is ugly and not intuitive if you could also just show the signals:
How? Unsuprisingly we proceed as follows: We remove all actual ticks from the plot and add correctly small sized axes onto the figure.</description>
    </item>
    
    <item>
      <title>Getting the argument names of a function</title>
      <link>https://morris-frank.dev/function-names/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/function-names/</guid>
      <description>Why? My use-case is as follows: I have a plotting function which takes a variable number of signals and plots them in an organized little plot:
def plot_data(*signals: torch.Tensor): ... The organization of those plots I can infer from the data, but it would also be nice to label the plots with a legend. The pythonic way to do this, is either to accept another argument with a list of labels or give the signals in a dictionary with the labels as the keys.</description>
    </item>
    
    <item>
      <title>Personalize your keyboard layout</title>
      <link>https://morris-frank.dev/keymap/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/keymap/</guid>
      <description>What is it? That&amp;rsquo;s easy. The XKB (X keyboard extension) layout tells your system which character/symbol to print, when you press a key on your keyboard.
Why? Most people that start going down this path and ask Which keyboard layout should I use? probably end up with one of the modern optimized layouts, like Neo (German only). The argument being, that the layout most of use like QWERTY (or QWERTZ, etc.</description>
    </item>
    
    <item>
      <title>Using a LaTeX macro package</title>
      <link>https://morris-frank.dev/latex-macros/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/latex-macros/</guid>
      <description>If you never have written a TeX package, here the short-form with only the stuff we need. You start the file with
\NeedsTeXFormat{LaTeX2e}[1994/06/01] \ProvidesPackage{YOUR-PACKAGE-NAME} end it with
\endinput and save it with extension .sty instead of .tex.
Things to add  Packages you always include. For example which fonts to use. In a package .sty file you use \RequirePackage instead of \usepackage to include other packages. \RequirePackage{newpxtext} \RequirePackage{mathpazo} \RequirePackage{dsfont}  Faster font changes.</description>
    </item>
    
    <item>
      <title>WaveNet from scratch</title>
      <link>https://morris-frank.dev/wavenet/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/wavenet/</guid>
      <description>This guide is geared towards readers with a background in modern deep learning.
The problem Lets say we want to generate sound signals. This might happen in different settings. We might have music notes + a instrument and want to generate their sound \(w(\mathrm{note}, \mathrm{instrument}) = \mathrm{sound}\), or we have a text and want to generate the corresponding speech \(w(\mathrm{text}) = \mathrm{sound}\) or maybe we already have a sound signal, but it is noisy and we want to remove the noise \(w(\mathrm{noisy\ sound}) = \mathrm{sound}\).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://morris-frank.dev/bivy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/bivy/</guid>
      <description>   Item Product Price Weight Volume     Bivy bag BD/MSR/RAB 150-250 200-350 3L   Sleeping bag Mythic Ultra 180 450 400 5L    </description>
    </item>
    
    <item>
      <title>Making music videos with AI</title>
      <link>https://morris-frank.dev/ai_music_video/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://morris-frank.dev/ai_music_video/</guid>
      <description>Let&amp;rsquo;s start right away with some results from the setup.
Lucy in the Sky with Diamonds As all the videos are pretty intense and inconsistent, I think psychdelic rock lends itself quite naturally to this kind of video… What better than the classic Lucy in the sky from The Beatle&amp;rsquo;s Sgt. Pepper album.
Input here are only the lyrics plus &amp;ldquo;The Beatles&amp;rdquo; at the beginning and &amp;ldquo;The end&amp;rdquo; at the end.</description>
    </item>
    
  </channel>
</rss>
